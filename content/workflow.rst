.. _workflow:

Workflow
========

.. questions::

   - How are OpenFOAM cases organised?
   - What files do I need to create to generate a test case?

.. objectives::

   - Know the basic settings and structure of OpenFOAM cases
   - Be able to create a simple test case

.. instructor-note::

   - 15 min teaching
   - 0 min exercises


Case structure
--------------

To setup a case, you need to have at least 3 directories in your case directory, namely **system**, **constant** and **<initial time directory>** (normally **0**).

.. code:: terminal

 $ ls
 0 constant system


OpenFOAM cases are configured using plain text input files located across the three directories. In each input file, OpenFOAM uses a plain text dictionary format with keywords and values

**system** contains input files for grid generators and solvers. Files commonly found in this folder include the following:

    - ``controlDict``: the main simulation control parameters. This includes e.g. the type of solver, timing information, write format, and optional libraries that can be loaded at run time;
    - ``fvSchemes``: the selection of the numerical schemes used to discretise the terms in the governing equations;
    - ``fvSolution``: the iterative solver and pressure-velocity coupling parameters, as well as residual controls;
    - ``blockMeshDict``: to control the block-structured mesher blockMesh;
    - ``snappyHexMeshDict``: to set the parameters for snappyHexMesh, another mesher shipped with OpenFOAM used to generate hex-dominant meshes of complex geometries;
    - ``decomposeParDict`` : to set the parameters of the domain decomposition used for running OpenFOAM in parallel.
    - ...

.. note:: 

  Of these, the first one is always needed, the following two are needed when the case is run, ``blockMeshDict`` and ``snappyHexMeshDict`` are needed in the meshing phase.
  ``decomposeParDict`` is needed both at mesh-time and runtime in case of parallel processing.


**constant**: Contains values that are constant during simulation like transport properties of the fluid (viscosity models) and mesh coordinates

    - ``polyMesh``: where the computational mesh is stored, as generated by the mesher;
    - ``physicalProperties``: the material properties of the fluid, such as density and viscosity;
    - ``momentumTransport``: turbulence modelling and rheological properties.
    - ...

**0**: contains initial fields of the flow e.g. velocity, pressure etc. and boundary conditions

  - U;
  - p;
  - ...


Additional directories can be generated, depending on use cases. The most common ones include:

   - <result time directories>: field predictions as a function of iteration count or time
   - postProcessing: data typically generated by function objects
   - data conversion, e.g. VTK


A typical workflow for an OpenFOAM case is schematically shown below:

.. code:: text

 Start
   |
   v
 blockMesh // Create a block mesh (set by system/blockMeshDict)
   |
   v
 decomposePar // Divide into submeshes (set by system/decomposeParDict)
   |
   v
 snappyHexMesh // create complex mesh (set by system/snappyHexMeshDict)
   |
   V
 foamRun // run application(OpenFOAM solver) (set by system/controlDict)
   |
   v
 reconstructPar // Stitch together the solutions from  the submeshes



Of course, this can vary depending on the mesher, whether or not it is a parallel run, additional pre- or post-processing steps.



A few examples of the dictionaries are shown below:

.. tabs::

   .. tab:: controlDict

      .. code-block:: cpp

        /*--------------------------------*- C++ -*----------------------------------*\
          =========                 |
          \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
          \\    /   O peration     | Website:  https://openfoam.org
            \\  /    A nd           | Version:  12
            \\/     M anipulation  |
        \*---------------------------------------------------------------------------*/
        FoamFile
        {
            format      ascii;
            class       dictionary;
            location    "system";
            object      controlDict;
        }
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

        application     foamRun;

        solver          incompressibleFluid;

        startFrom       startTime;

        startTime       0;

        stopAt          endTime;

        endTime         10;

        deltaT          0.005;

        writeControl    timeStep;

        writeInterval   100;

        purgeWrite      0;

        writeFormat     ascii;

        writePrecision  6;

        writeCompression off;

        timeFormat      general;

        timePrecision   6;

        runTimeModifiable true;

        // ************************************************************************* //


   .. tab:: fvSchemes

      .. code-block:: cpp

        /*--------------------------------*- C++ -*----------------------------------*\
          =========                 |
          \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
          \\    /   O peration     | Website:  https://openfoam.org
            \\  /    A nd           | Version:  12
            \\/     M anipulation  |
        \*---------------------------------------------------------------------------*/
        FoamFile
        {
            format      ascii;
            class       dictionary;
            location    "system";
            object      fvSchemes;
        }
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

        ddtSchemes
        {
            default         Euler;
        }

        gradSchemes
        {
            default         Gauss linear;
        }

        divSchemes
        {
            default         none;
            div(phi,U)      Gauss limitedLinearV 1;
            div(phi,k)      Gauss limitedLinear 1;
            div(phi,epsilon) Gauss limitedLinear 1;
            div(phi,omega)  Gauss limitedLinear 1;
            div(phi,R)      Gauss limitedLinear 1;
            div(R)          Gauss linear;
            div(phi,nuTilda) Gauss limitedLinear 1;
            div((nuEff*dev2(T(grad(U))))) Gauss linear;
        }

        laplacianSchemes
        {
            default         Gauss linear corrected;
        }

        interpolationSchemes
        {
            default         linear;
        }

        snGradSchemes
        {
            default         corrected;
        }


        // ************************************************************************* //

   .. tab:: fvSolution

      .. code-block:: cpp

        /*--------------------------------*- C++ -*----------------------------------*\
          =========                 |
          \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
          \\    /   O peration     | Website:  https://openfoam.org
            \\  /    A nd           | Version:  12
            \\/     M anipulation  |
        \*---------------------------------------------------------------------------*/
        FoamFile
        {
            format      ascii;
            class       dictionary;
            location    "system";
            object      fvSolution;
        }
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

        solvers
        {
            p
            {
                solver          GAMG;
                tolerance       1e-06;
                relTol          0.1;
                smoother        GaussSeidel;
            }

            pFinal
            {
                $p;
                tolerance       1e-06;
                relTol          0;
            }

            "(U|k|epsilon|omega|R|nuTilda).*"
            {
                solver          smoothSolver;
                smoother        GaussSeidel;
                tolerance       1e-05;
                relTol          0;
            }
        }

        PIMPLE
        {
            nCorrectors     2;
            nNonOrthogonalCorrectors 0;
            pRefCell        0;
            pRefValue       0;
        }


        // ************************************************************************* //


Input types
-----------

Dictionaries
~~~~~~~~~~~~

OpenFOAM input dictionaries are designed to be human-readable ASCII text files, consisting of collections of keyword-value entries bounded by curly braces {}, e.g.

.. tabs::

   .. tab:: dictionary

      .. code-block:: cpp

            dictionary_name
            {
                labelType       1;
                scalarType      1.0;
                vectorType      (0 0 0);
                wordType        word;
                stringType      "string";
                ...
            }


The main basic entry types include:

.. list-table:: 
      :widths: 25 25 25 
      :header-rows: 1

      * - Type
        - Description
        - Example
      * - boolean
        - state
        - `on`, off, true, false
      * - label
        - integer
        - 123
      * - scalar
        - float
        - `123.456`
      * - word
        - a single word
        - value `value`
      * - string
        - quoted text
        - "this is a string value"
      * - list
        - a list of entries bounded by () braces
        - (0 1 2 3 4 5) 
      * - vector
        - a list of 3 values, nominally (x y z) components 
        - (0 0 0)
      * - sphericalTensor
        - a spherical tensor 
        - (0)
      * - symmTensor
        - a symmetric tensor defined by (xx xy xz yy yz zz)
        - (0 0 0 0 0 0)
      * - tensor
        - a nine component tensor defined by (xx xy xz yx yy yz zx zy zz)
        - `(0 0 0 0 0 0 0 0 0)`


